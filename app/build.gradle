apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion rootProject.compileSdk_version
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.strider.weathermvvm"
        minSdkVersion rootProject.minSdk_version
        targetSdkVersion rootProject.targetSdk_version
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {

            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android {
        sourceSets {
            String sharedTestDir = 'src/sharedTest/java'
            test {
                java.srcDirs += sharedTestDir
            }
            androidTest {
                java.srcDirs += sharedTestDir
            }
        }
    }

    buildFeatures.dataBinding = true

    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    androidExtensions {
        experimental = true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {
    // Default dependencies
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_androidX_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_androidX_version"

    kapt "android.arch.persistence.room:rxjava2:1.1.1"
    implementation "android.arch.lifecycle:extensions:$lifeCycle_extension_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"

    // VegaLayoutManager
    implementation "com.stone.vega.library:VegaLayoutManager:$vega_version"

    // Paging 3
    implementation "androidx.paging:paging-runtime:$paging_version"

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // ktx
    implementation "androidx.activity:activity-ktx:$activity_ktx_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"

    // lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    // room
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    implementation "androidx.room:room-common:$room_version"
    implementation "androidx.room:room-rxjava3:2.3.0-alpha03"
    kapt "androidx.room:room-compiler:$room_version"

    // RxAndroid, RxKotlin
    implementation "io.reactivex.rxjava3:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava3:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava3:rxkotlin:$rxkotlin_version"
    implementation "com.jakewharton.rxbinding4:rxbinding:$rxbinding4_version"

    // RxPermissions
    implementation "com.github.tbruyelle:rxpermissions:$rxpermissions_version"

    // AutoDisposable Uber
    implementation "com.uber.autodispose2:autodispose:$autodispose2_version"
    implementation "com.uber.autodispose2:autodispose-lifecycle:$autodispose2_version"
    implementation "com.uber.autodispose2:autodispose-android:$autodispose2_version"
    implementation "com.uber.autodispose2:autodispose-androidx-lifecycle:$autodispose2_version"

    // kotlinX
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx3:$coroutines_version"

    // retrofit2
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:retrofit-mock:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"

    // kotpref
    implementation "com.chibatching.kotpref:kotpref:$kotpref_version"
    implementation "com.chibatching.kotpref:livedata-support:$kotpref_version"

    // anko
    implementation "org.jetbrains.anko:anko:$anko_version"
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-design:$anko_version"

    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"

    //Material Design
    implementation "com.google.android.material:material:$material_version"

    // appctx
    implementation("com.louiscad.splitties:splitties-appctx:$splitties_version")

    // google location
    implementation "com.google.android.gms:play-services-location:$google_location_version"

    //Elastic view
    implementation "com.github.skydoves:elasticviews:$elastic_version"

    // Tests dependencies
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$test_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    // AndroidX Test - JVM testing
    testImplementation "androidx.test.ext:junit-ktx:$androidx_test_runner_version"
    testImplementation "androidx.test:core-ktx:$androidx_test_core_version"
    testImplementation "androidx.arch.core:core-testing:$arch_testing_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrest_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"

    // AndroidX Test - Instrumented testing
    androidTestImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation "androidx.test.ext:junit:$test_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.arch.core:core-testing:$arch_testing_version"
    androidTestImplementation "androidx.test:core-ktx:$androidx_test_core_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_rules_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
}

kapt {
    correctErrorTypes true
}